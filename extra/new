int	ft_radix_skip(int **stacks, int stack, int *end, int magnitude)
{
	int	moves_skiped;
	int	i;

	moves_skiped = end[stack];
	i = 0;
	while (i++ < end[stack])
	{
		if (!((stacks[stack][i] >> magnitude)& 1))
		{
			moves_skiped = i;
			if (i > (end[stack] / 2))
				while (i++ < end[stack])
					ft_rev_rotate(stacks, stack, end, 0);
			else
				moves_skiped = 0 ;
		}
	}
	return (moves_skiped);
}

int	ft_radix(int **stacks, int stack, int *end, int magnitude)
{
	int	moves_a;
	int moves_b;
	int	i;

	i = -1;
	moves_a = 0;
	while (++i < end[stack])
	{
		if (!((stacks[stack][i] >> magnitude)& 1))
			moves_a = end[stack];		
	}
	while (moves_a > 0)
	{
		if (!((stacks[stack][0] >> magnitude)& 1))
			ft_push(stacks, stack, end, 0);
		else
			ft_rev_rotate(stacks, stack, end, 0);
		moves_a--;
	}
	i = -1;
	moves_b = 0;
	while (++i < end[!stack])
	{
		if (((stacks[!stack][i] >> magnitude)& 1))
			moves_b = end[!stack];		
	}
	while (moves_b > 0)
	{
		if (stacks[!stack][0] >> magnitude & 1)
			ft_push(stacks, !stack, end, 0);
		else
			ft_rev_rotate(stacks, !stack, end, 0);
		moves_b--;
	}
	return (magnitude);
}